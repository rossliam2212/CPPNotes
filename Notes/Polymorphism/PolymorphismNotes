/***======================***/
===== Polymorphism Notes =====
/***======================***/

-----------------------
- What is Polymorphism?
-----------------------

    - Fundamental to Object-Oriented Programming

    - Polymorphism
        - Compile-time / early binding / static binding
        - Run-time / late binding / dynamic binding

    - Run-time Polymorphism
        - Being able to assign different meanings to the same function at run-time

    - Allows us to program more abstractly
        - Think general vs. specific
        - Let C++ figure out which function to call at run-time

    - Not the default in C++, run-time polymorphism is achieved via:
        - Inheritance
        - Base class pointers or references
        - Virtual Functions



--------------------------------------------
- A Non-Polymorphic Example - Static Binding
--------------------------------------------

    Account a;
    a.withdraw(1000);           // Account::withdraw()

    Savings b;
    b.withdraw(1000);           // Savings::withdraw()

    Checking c;
    c.withdraw(1000);           // Checking::withdraw()

    Trust d;
    d.withdraw(1000);           // Trust::withdraw()

    Account* p = new Trust();
    p->withdraw(1000);          // Account::withdraw()
                                // SHOULD BE
                                // Trust::withdraw()


-----------------------------------------
- A Polymorphic Example - Dynamic Binding
-----------------------------------------

    - withdraw method is virtual in Account

    Account a;
    a.withdraw(1000);           // Account::withdraw()

    Savings b;
    b.withdraw(1000);           // Savings::withdraw()

    Checking c;
    c.withdraw(1000);           // Checking::withdraw()

    Trust d;
    d.withdraw(1000);           // Trust::withdraw()

    Account* p = new Trust();
    p->withdraw(1000);          // Trust::withdraw()


----------------------------
- Using a Base Class Pointer
----------------------------

    Account* p1 = new Account();
    Account* p2 = new Savings();
    Account* p3 = new Checking();
    Account* p4 = new Trust();

    p1->withdraw(1000);     // Account::withdraw()
    p2->withdraw(1000);     // Savings::withdraw()
    p3->withdraw(1000);     // Checking::withdraw()
    p4->withdraw(1000);     // Trust::withdraw()

    // delete all pointers


- Example 2 w/ Arrays:

    Account* p1 = new Account();
    Account* p2 = new Savings();
    Account* p3 = new Checking();
    Account* p4 = new Trust();

    Account* arr[] = {p1, p2, p3, p4};

    for (auto i = 0; i < 4; ++i)
        arr[i]->withdraw(1000);

    // delete all pointers


- Example 3 w/ Vectors:

    Account* p1 = new Account();
    Account* p2 = new Savings();
    Account* p3 = new Checking();
    Account* p4 = new Trust();

    std::vector<Account*> accounts {p1, p2, p3, p4};

    for (auto acc_ptr : accounts)
        acc_ptr->withdraw(1000);

    // delete all pointers



-------------------
- Virtual Functions
-------------------

    - Redefined functions are bound statically
    - Overridden functions are bound dynamically
    - Virtual functions are overridden
    - Allows us to treat all objects generally as objects of the Base class


- Declaring Virtual Functions

    - Declare the function you want to override as virtual in the Base class
    - Virtual functions are virtual all the way down the hierarchy from this point
    - Dynamic Polymorphism only via Account class pointer or reference


    class Account {
    public:
        virtual void withdraw(double amount);
        ....
    };


   - Override the function in the Derived classes
   - Function signature and return type must match EXACTLY
   - virtual keyword not required but is best practice
   - If you don't provide and overridden version, it is inherited from it's base class


   class Checking : public Account {
   public:
        virtual void withdraw(double amount);
        ....
   };

   OR

   class Checking : public Account {
   public:
       void withdraw(double amount) override;
       ....
   };



---------------------
- Virtual Destructors
---------------------

    - Problems can happen when we destroy polymorphic objects
    - If a derived class is destroyed by deleting its storage via thr base class pointer
      and the class has a non-virtual destructor. Then the behaviour is undefined in the
      C++ standard
    - Derived objects must be destroyed in the correct order starting at the correct destructor


- Solution/Rule:
    - If a class has virtual functions
    - ALWAYS provide a public virtual destructor
    - If a base class destructor is virtual, then all derived class destructors are also virtual


    class Account {
    public:
        virtual void withdraw(double amount);
        virtual ~Account();
        ....
    };



------------------------
- The Override Specifier
------------------------

    - We can override Base class virtual functions
    - The function signature and return type must be EXACTLY the same
    - If they are different, then we have redefinition NOT overriding
    - Redefinition is statically bound
    - Overriding is dynamically bound
    - C++11 provides an override specifier to have the compiler ensure overriding


Example:

    class Base {
    public:
        virtual void sayHello() const {
            std::cout << "Hello I am a Base class object\n";
        }
        virtual ~Base() {}
    };

    class Derived : public Base {
        virtual void sayHello() {   // Notice the const is missing - NOT OVERRIDING
            std::cout << "Hello I am a Derived class object\n";
        }
        virtual ~Derived() {}
    };


    Base* p1 = new Base();
    p1->sayHello();             // "Hello I am a Base class object"

    Base* p2 = new Derived();
    p2->sayHello();             // "Hello I am a Base class object"


    - Not what we expected
    - The sayHello method signatures are different
    - So Derived redefines sayHello instead of overriding it



---------------------
- The Final Specifier
---------------------

    - C++11 provides the final specifier
        - When used at the class level:
        - Prevents a class from being derived from

        - When used at the method level:
        - Prevents virtual method from being overridden in derived classes


- Syntax - Class level:

    class Base final {
        ....
    };

    class Derived final : public Base {
        ....
    };


- Syntax - Method level:

    class A {
    public:
        virtual void doSomething();
    };

    class B : public A {
        virtual void doSomething() final;   // Prevents further overriding
    };

    class C : public B {
        virtual void doSomething();         // COMPILER ERROR - Can't override
    };



-----------------------------
- Using Base Class References
-----------------------------

    - We can also use Base class references with dynamically polymorphism
    - Useful when we pass objects to functions that expects a Base class reference


- Example 1:

    Account a;
    Account& ref = a;
    ref.withdraw(1000);     // Account::withdraw

    Trust t;
    Account& ref = t;
    ref.withdraw(1000);     // Trust::withdraw


- Example 2:

    void doWithdraw(Account& acc, double amount) {
        acc.withdraw(amount);
    }

    Account a;
    doWithdraw(a, 1000);    // Account::withdraw

    Trust t;
    doWithdraw(t, 1000);    // Trust::withdraw
